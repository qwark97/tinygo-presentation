# Hello, TinyGo!
And other fun embeded stuff

Marcin Plata
4 November 2022

marcin.plata@softwaremind.com

## Agenda
- What is TinyGo project?
- Used hardware
- The *fun*
    - Target: the light
    - Realization
    - Final result 

:   * first of all we'll talk about the tinygo project itself
:   * I will tell you what it is and how to use it
:   * then I will show you the hardware stuff that we will be using in this presentation
:   * and the last part is going to be about the goal that we will want to achievie during this talk

.image images/gopher.png 300 300

## What is TinyGo?

:   * as we can see on the home page of the project - tinygo is a go compiler for small places
:   * in other words - tinygo allows to create small binaries from the projects written in go
:   * it has been created in twenty-nineteen (at least then was the first release of the project)
:   * tinygo can be used most of all in the embeded systems, but also the webassembly and even the "regural" go projects
:   * tinygo uses the same go language as in the regular compiler
:   * also, tinygo supports almost all golang functionalities 
:   * although the important matter whether something will be working or not is the target environment to which the binary has been created

.image images/tinygo-homepage.png 575 _

## For example

:   * the clasic "hello world" for the go language, build with regular go compiler and tinygo
:   * which is worth noting is the size of the binary files
:       - the clasic complier created a binary file with almost 2 megabytes
:       - where the tinygo compiler created the same "application" with size just around 30 kilobytes
:   * this is huge difference
:   * so, should we then use tinygo for our regular projects?

.code src/hello_world.go

Standard Go
```
$ go build -o go-hello ./hello_world.go
```

TinyGo
```
$ tinygo build -o tinygo-hello ./hello_world.go
```
<br>
Comparition

.image images/binaries-comparition.png 80 _

## Should we then use it on PROD?

:   * the short answer is - absolutely not
:   * firstly, building even such trivial go program with tinygo takes much more time than in regular go compliler 
:   * and in general it is more expensive operation
:   * and we need to remember, the speed of compliling is one of the golang's benefits

**Efficiency**
<br>
Go

.image images/time-go-build.png 45 1000

TinyGo

.image images/time-tinygo-build.png 45 1000


## Should we then use it on PROD?

:   * which is even more important
:   * tinygo has been created in particular reasons which is NOT replacing the regular go compiler
:   * the goal for project itself is to introduce the go language into microcontrollers
:   * and, all of that works good enough that since twenty-twenty the project if officialy supported by Google


**Purpose**

.image images/scope.png

## How does it work beneath?

:   * well, the compler itself is written directly in go and it is based on the LLVM project
:   * as I'm not well familiar with this compiler-related subject and I don't want to missguide you in anything I will not tell more about it
:   * but, if anyone is interested, here is a link to the documentation which should answer your questions in this matter


.link https://tinygo.org/docs/concepts/compiler-internals/

.image images/internals.png 500 450

## Installation

:   * what about installation
:   * it rather simple and the instructions given in the tinygo webpage should be enough to easily install it
:   * of course the project needs the golang to present
:   * this link allows to choose the instructions for the particular OS
:   * then, depending on the microcontroller that will be in use, the one needs to do some additional steps
:   * and, as it is common, especially in community driven projects, documentation might have some minor issues
:   * so some debugging skills for the particular operating systems might be useful

- Go must be available
- Follow the instructions:

.link https://tinygo.org/getting-started/install/

- Choose further steps based on the used microcontroller:

.link https://tinygo.org/docs/reference/microcontrollers/

<br>
<br>
<br>

_Debugging skills for used OS might be usefull_...

## About microcontrollers

:   * tinygo supports the significant number of different microcontrollers
:   * some of them are fully supported, some only partially
:   * the list you can see on the screen is available under this link


.link https://tinygo.org/docs/reference/microcontrollers/

.image images/microcontrollers.gif 500 600

## Used hardware

:   * and, as we are talking about the hardware
:   * this presentation uses the ESP8266 - NodeMCU v3 board
:   * the board looks as in the pictures
:   * rather cool board, pretty cheap (around 6Euro), it as wifi module and the power and flashing might be done through the USB
:   * it has quite a lot of PINs and it is easy to connect the wires to it without soldering


**ESP8266 - NodeMCU**

.image images/esp8266.png 570 1000

## Used hardware

:   * from tinygo perspective it supports this board in those interfaces
:   * it supports the basics which is GPIO (general purpose input outpu)
:   * it should support UART which is serial communication
:   * but unfortunatelly even despite that the board supports the wifi, the tinygo does not support it on this microcontroller
:   * thats not good - some form of communication definatelly would be useful 
:   * and the sending data through network seems as something the most natural
:   * well, even despite such description, nothing stops us to do some experiments with it
:   * that being said, let's start some practice instead only theory


**From TinyGo perspective**

.image images/esp-interfaces.png 545 540
 
## The fun

:   * what is the our goal today?
:   * the desk I'm working on, has on the back this led strip
:   * the led strp can be managed through this remote 
:   * and the goal is to include the ESP board I've shown to this managing process
:   * thanks to that it'd be possible to programm some custom logic 
:   * and be able to do some fun stuff with it


.image images/led-desk.jpeg 545 840

## Fulfilled prerequisites

:   * at the beginning let's sum up with what we start
:   * we have installed tinygo
:   * I've done some preparations for the board I'll be using
:   * and I've installed the vs code extension which supports creating code for tinygo
:   * also, All further activities will be performed on the Linux

- Installed TinyGo
- Installed additional stuff for the microcontroller
- Installed VSCode extension (ID: tinygo.vscode-tinygo)
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

_All further activities performed on Linux_

## hello_world.go

:   * <omÃ³wienie kodu linia po linii> 
:   * about the "machine" package I will tell more right away
:   * on my board, this defined PIN which manages the LED on the board works in a way that
:   * low function turns it on, and high function turns it off


.code src/hello_world/main.go

## hello_world.go

:   * the "machine" package is something specific fo the tinygo
:   * it defines all functionalities related with a particular board implemented by the TinyGo team
:   * in my case it looks more or less like this
:   * and thanks to the extension I mentioned before, 
:   * the vs code knows which "machine" package will be used in the compiling time


.image images/machine-package.gif

## hello_world.go

:   * we have source code
:   * we know more or less what the machine package is for
:   * time to flash the board
:   * first, we check whether the system sees the connected board (it is this ttyUSB0)
:   * and we flash it with this command
:   * operation is fast and simple - way simpler than "deplying" the similar code written in C using ArduinoIDE


.image images/first-flashing.gif 550 1000

## hello_world.go

:   * the output from the command itselft gives basic info about the board and we can see it clearly here


.image images/first-flashing.png 550 1000

## hello_world.go

:   * result of this hello world code looks like this
:   * the board is blinking
:   * alright, the basic stuff works, whats next?


.image images/blinking.gif 550 700

## Outside signal

:    * documentation says that the tinygo does support the wifi on this board
:    * but we can experiment and use some go and tinygo functionalities to try to achieve the connection


.image images/esp-interfaces.png 545 540

## Cgo

:   * the example of such functionality might be the Cgo
:   * it works only partialy with tinygo but lets try it
:   * and what is a Cgo? 
:   * Cgo is a functionality that allows the go packages to call the C code


.link https://go.dev/blog/cgo

.image images/cgo.png 515 _

## Cgo

:   * the usage of it looks more or less like this
:   * the comment that is right above the 'import "C"' line is interpreted as a C code
:   * from go, we can call C functions using the pseudo C package 
:   * and as a off topic, what is interesting that getting rid of the "fmt" package makes the binary smaller
:   * from 1.8 megabytes to the 1.2 megabytes. It will be important later


.code src/c_hello_world/main.go

.image images/c_hello.png

## Cgo

:   * in our case the usefull code might look like this
:   * this is a part of the code I've been already using on this board 
:   * so I know that theoreticaly it should allow the board to connect to the wifi
:   * unfortunatelly, shame on me but the C has beaten me up :/
:   * despine of the research and many experiments I was not able to compile it outside of the ArduinoIDE
:   * so, even if theoreticaly it should be possible to do it I needed to let it go
:   * if someone knows the C and knows what maybe can be done here please let me know
:   * alright, C won't work here but maybe there is some possibility to connect to wifi using only the golang


.image images/wifi.gif 

## ESP-AT Driver

:   * I've done another research, and link through link I've found some possibility
:   * it's about to use the driver dedicated for the handling the wifi for the ESP boards

.image images/wifi-github-issue.png

## ESP-AT Driver

:   * this solution uses the serial communication to use wifi so theoreticalu it should work
:   * the catch is, it needs proper firmware on the board
:   * alright, if it needs lets install it

.image images/espat.png

## ESP-AT Driver

:   * after loooong research, I've found proper files and instructions and I've done it
:   * the process itselft looks fine, at least it does not return any errors 
:   * I've run on it also the hello world example so I assumed that everything is okay

.image images/firmware-flashing.gif 550 1000

## ESP-AT Driver

:   * I had a proper firmware so I've found the examples how to use it
:   * and it looks more or less like this
:   * we again define the led related stuff
:   * we declare the uart variable, configure it with proper pins
:   * we create an adaptor, and we check whether the ESP is connected properly
:   * if so, we connect to the wifi

.code src/go_wifi/main.go

## ESP-AT Driver

:   * the used functions are here
:   * if the ESP is not connected we should se a "failed" message on the serial output
:   * of course the values of ssid and pass were corrected during flashing the board

.code src/go_wifi/main.go /START OMIT/,/END OMIT/

## ESP-AT Driver

:   * that is how the flashing looks like
:   * standrad command but  with two additional flags
:   * -serial uart , says which output should be used
:   * -monitor enables serial monitor
:   * and as we can see the program does not work
:   * it fails to even connect the driver with the board
:   * why is it happening? I dont know
:   * might be the problem with the board, with the driver, with the firmware I used or I just might done something wrong
:   * hard to say
:   * the fact is that the communication this way will work

.image images/go_wifi.gif _ 1000

## We have a problem...

:   * its hard to think about some interesting board usage if we won't be able to influence the behavior
:   * without the communication the only thing we could do is program one thing and thats all
:   * so if reasonable ways of interacting failed, lets try something else

.image images/meme.jpg

## Let's heat it

:   * during the walking through the drivers used in tinygo I've noticed the driver "dht"


.image images/dht.png

## Let's heat it

:   * I know it, because I've been using it on this board before. Using C but still
:   * so I got an idea - I don't have wifi but maybe I will be able to influence the board using the temperature

.image images/c_dht(1).png 250 520
.image images/c_dht(2).png 270 520


## Let's heat it

:   * if so, lets do it
:   * I've done some codding and the results looks like this
:   * tak wyglÄda kod ktÃ³ry pobiera temeraturÄ (omÃ³wiÄ linia po lini i wskazaÄ ze olewam bÅÄdy tu)

.code src/temp/main.go /START_PART1 OMIT/,/END_PART1 OMIT/

## Let's heat it

:   * and this is how the printing functions looks like
:   * with good reasons you may ask - Marcin, why you don't use the fmt.Sprintf function?
:   * nie bezzasadnie moÅ¼ecie spytaÄ - Marcin, czemu w taki sposÃ³b tworzysz wiadomoÅÄ, dlaczego nie uÅ¼yÅeÅ e.g. fmt.Sprintf
:   * well, you remember when I was talking about Cgo and how much space was freed when I got rid of the fmt package?
:   * well, this package is big enough to be too big for my board. Therefore I need to prepare this message this way
:   * what can I say? The embeded world has its own rules

.code src/temp/main.go /START_PART2 OMIT/,/END_PART2 OMIT/

## Let's heat it

:   * which is important, by default the code I've prepared won't work with "machine" package I'm using
:   * it is like this, because one of the "dht" functions needs a value from "machine" package which my board does not define
:   * so what can I do in such situation?

.image images/thermometer-err.png

## Let's heat it

:   * well, I can assume that I can live without the interrupts at all and just comment this stuff
:   * is it the best solution? I don't know
:   * is it working? sure so lets use it

.image images/thermometer-comment.png

## Let's heat it

:   * from the hardware perspective it looks like this
:   * this is the thermometer
:   * simple device, not the best acuracy but is good enough

.image images/thermometer.jpg 550 _

## Let's heat it

:   * it is connected with the board like this
:   * Å¼Ã³Åty kabel (wire) to zasilanie (power supply) 3V
:   * niebieski to uziemienie
:   * zielony to podpiÄcie do PINu ktÃ³ry pozwala na odczyt temperatury

.image images/connection.jpg 580 _

## Let's heat it

:   * is it working? 
:   * as we can see - it is
:   * the initial temperature starts rising when I warm up the thiermometer
:   * And it means that I'm able to influence the board's behavior in some way
:   * great!

.image images/solo_temp_measurement.gif _ 1000

## Action - reaction

:   * so, we know that influencing the board in this way works, how can we use it?
:   * zrobiÅem coÅ takiego
:   * czÄÅÄ pierwsza opisaÄ co siÄ dzieje

.code src/temp_trigger/main.go /START_PART1 OMIT/,/END_PART1 OMIT/

## Action - reaction

:   * czÄÅÄ druga opisaÄ co siÄ dzieje
:   * funkcja prettyTempPrintln jest taka jak wczesniej

.code src/temp_trigger/main.go /START_PART2 OMIT/,/END_PART2 OMIT/

## Action - reaction

:   * wykonanie tego kodu prezentuje siÄ w taki sposÃ³b
:   * gdy zaczynam ogrzewaÄ termometr i temperatura przez niego wykrywana przekracza 30 stopni
:   * wtedy zapala siÄ lampka
:   * gdy temperatura spadnie ponizej 30 stopni, lampka gaÅnie
:   * super, skoro mamy sposÃ³b sterowania i odpowiedniÄ logikÄ ktÃ³ra to obsÅuÅ¼y moÅ¼emy iÅÄ dalej
:   * next and the final step in this story will be achieving a state where the board can turn on and off the led strp on my desk    

.image images/temp_trigger.gif

## Illuminate

.link https://www.makeuseof.com/tag/connect-led-light-strips-arduino/

:   * this time we start with electronics
:   * nie bÄdÄ wchodziÅ za mocno w szczegÃ³Åy natomiast caÅoÅÄ jest bazowana na takim diagramie

.image images/diagram.png

## Illuminate

:   * na Å¼ywym sprzÄcie wyglÄda to tak
:   * tutaj jest "motherboard for prototipes"
:   * widzimy rezystory, tranzystory i termomentr

.image images/motherboards.jpg 550 1000

## Illuminate

:   * this is power supply for the led strip itself
:   * the board generates the 5 volts
:   * to urzÄdzenie pozwala jako input wpiÄÄ zasilacz 12V
:   * na wyjÅciu teoretycznie powinno byÄ max 5V ale kiedyÅ coÅ spaliÅem i jest 10V 
:   * i na szczÄÅcie (luckily) - my potrzebujemy 12V ale 10V jest wystarczajÄco

.image images/power-supply.jpg 880 _

## Illuminate

:   * wires connection to the board looks like this
:   * red, green, blue and black are related with handling the led strip
:   * purple, orange and brown are the thermometer connections

.image images/wires-connections.jpg 580 _

## Illuminate

:   * teraz kod
:   * more or less what we've seen before but now when the treshold is reached the led strp is being turn on or off
:   * here we define pins that we've seen that were connected on previous slides


.code src/led_strip/main.go /START_DECLARATION OMIT/,/STOP_DECLARATION OMIT/

## Illuminate

:   * nastÄpnie funkcja main
:   * jak wczeÅniej z tym, Å¼e nowe piny potrzebujÄ konfiguracji
:   * gdy zadziaÅa trigger woÅana jest odpowiednia funkcja

.code src/led_strip/main.go /START_MAIN OMIT/,/STOP_MAIN OMIT/

## Illuminate

:   * a same funkcje wyglÄdajÄ tak
:   * to jest najprostszy sposÃ³b dziaÅania
:   * ten sposÃ³b po prostu odpala wszystkie kolory na maksymalnÄ jasnoÅÄ
:   * teoretycznie powinno daÄ siÄ teÅ¼ tym sterowaÄ ale uznaÅem, Å¼e to juÅ¼ jest poza zakresem
:   * moÅ¼e ktoÅ z Was bÄdzie chciaÅ to zmodyfikowaÄ i improve

.code src/led_strip/main.go /START_TRIGGER OMIT/,/STOP_TRIGGER OMIT/

## Illuminate?
:   * i teraz, najwaÅ¼niejsze pytanie - czy to dziaÅa?
:   * have we reached our goal?

.image images/terrifying.gif 500 600

## Illuminate!
:   * yep, it works!
:   * by warming up the thermometer, we are able to trigger the led strip to turn on
:   * and also - which isn't on the clip - turn off
:   * a to wszystko z wykorzystaniem tinygo i pÅytki esp8266

.image images/illuminate.gif 500 _

## Summary

 * Use proper tools to your tasks
 * __TinyGo rocks!__
 * Wires are important

:   * najwaÅ¼niejsze jest wybranie pÅytki zgodnej z oczekiwaniami
:   * jak gÅÃ³wnym celem jest jakiÅ projekt, wtedy pÅytka powinna byÄ taka Å¼eby go obsÅuÅ¼yc
:   * jak celem jest zabawa z konkretnym jÄzykiem, wtedy pÅytka powinna byÄ do niego dopasowana
:   * przykÅadowo, do zabawy z tinygo pÅytki ESP sÄ beznadziejne
:   *-----------------
:   * samo tinygo jest fantastyczne. Åatwe w obsÅudze, szybkie i przede wszystkim pozwala tworzyÄ logikÄ w go
:   * to ogromne uproszczenie gdy ktoÅ chce siÄ bawiÄ z mikrokontrolerami a nie zna / nie chce siÄ uczyÄ C
:   * jasne, sam projekt jest mÅody i ma pewne problemy wieku dzieciÄcego
:   * ale prÄÅ¼nie siÄ rozwija (is dynamically developing) i nie tylko dobrze siÄ go uÅ¼ywa ale stwarza okazjÄ do kontrybucji w nim samym
:   *-----------------
:   * last but not least
:   * do zabawy z elektronikÄ trzeba cÃ³Å¼ poznaÄ elektronikÄ - nie tylko zasady dziaÅania prÄdu
:   * rÃ³wnieÅ¼ istotne jest poznanie sposobÃ³w dziaÅania mikrokontrolerÃ³w, uÅ¼ywanych protokoÅÃ³w, wykorzystywanych praktyk itp.
:   * jako Å¼e caÅe to otoczenie mocno dziaÅa na open sourcie, to umiejÄtnoÅci takie jak
:     budowanie, kompilowanie czy debuggowanie mogÄ byÄ bardzo przydatne
:   * and that's it. I hope you enjoyed this presentation. And if you have any questions you can ask it now
:     or later on teams and I will try to answer it